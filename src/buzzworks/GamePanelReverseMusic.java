/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzworks;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Simon Junga (simonthechipmunk)
 */
public class GamePanelReverseMusic extends javax.swing.JPanel {
    
    private mainWindow mainwindow;
    private GameWindow gamewindow;
    private ArrayList<Track> tracks;
    public GameWindowPanelReverseMusic gamewindowpanel;
    private int playcount;

    /**
     * Creates new form GamePanelReverseMusic. Files must be stored in current directory subfolder "ReverseMusic" 
     * and following the namescheme (+ for forward, - for reverse): TITLE_ARTIST_(+).wav
     */
    public GamePanelReverseMusic() {
        initComponents();
    }

    public GamePanelReverseMusic(mainWindow mainwindow, String name) throws Exception{
        this.setName(name);
        this.mainwindow = mainwindow;
        this.tracks = new ArrayList();
        this.gamewindowpanel = new GameWindowPanelReverseMusic();
        
        initComponents();
        jButton_Stop.setEnabled(false);
        
        //read Tracklist
        try{
            getTracks();
        }
        catch (Exception e ){
            throw e;
        }
        
        //fill list and init
        DefaultListModel model = new DefaultListModel();
        for(int i=0; i<tracks.size(); i++){
            model.addElement(tracks.get(i).getTitle() + " - " + tracks.get(i).getArtist() );
        }   
        jList_Tracks.setModel(model);
        jList_Tracks.setSelectedIndex(0);
        
        jList_Tracks.setPreferredSize(new Dimension(350, tracks.size()*40));
        
        //handler list
        jList_Tracks.addListSelectionListener(new ListSelectionListener() {
            
            @Override
            public void valueChanged(ListSelectionEvent e) {
                jLabel_Title.setText(tracks.get(jList_Tracks.getSelectedIndex()).getTitle());
                jLabel_Artist.setText(tracks.get(jList_Tracks.getSelectedIndex()).getArtist());
                
                jButton_PlayReverse.setEnabled(true);
                jButton_Show.setEnabled(false);
                gamewindowpanel.setReset();
            }
        });
        
        //init game
        selectRandomNext();
        gamewindowpanel.setReset();
        jButton_Show.setEnabled(false);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Header = new javax.swing.JLabel();
        jLabel_Title = new javax.swing.JLabel();
        jButton_Next = new javax.swing.JButton();
        jButton_Show = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_Tracks = new javax.swing.JList<>();
        jLabel_Artist = new javax.swing.JLabel();
        jButton_PlayReverse = new javax.swing.JButton();
        jButton_Stop = new javax.swing.JButton();
        jLabel_HeaderArtist = new javax.swing.JLabel();
        jLabel_HeaderTitle = new javax.swing.JLabel();

        jLabel_Header.setFont(new java.awt.Font("Cantarell", 0, 60)); // NOI18N
        jLabel_Header.setText("Reverse Music");

        jLabel_Title.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        jLabel_Title.setForeground(new java.awt.Color(3, 53, 103));
        jLabel_Title.setText("Title");

        jButton_Next.setText("Next");
        jButton_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_NextActionPerformed(evt);
            }
        });

        jButton_Show.setText("Show");
        jButton_Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowActionPerformed(evt);
            }
        });

        jList_Tracks.setMinimumSize(new java.awt.Dimension(200, 200));
        jList_Tracks.setPreferredSize(new java.awt.Dimension(350, 1000));
        jScrollPane1.setViewportView(jList_Tracks);

        jLabel_Artist.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        jLabel_Artist.setForeground(new java.awt.Color(3, 53, 103));
        jLabel_Artist.setText("Artist");

        jButton_PlayReverse.setText("Play Reverse");
        jButton_PlayReverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PlayReverseActionPerformed(evt);
            }
        });

        jButton_Stop.setText("Stop");
        jButton_Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StopActionPerformed(evt);
            }
        });

        jLabel_HeaderArtist.setText("Artist");

        jLabel_HeaderTitle.setText("Title");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_Artist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel_Header, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_HeaderTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_HeaderArtist))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_PlayReverse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(72, 72, 72)
                        .addComponent(jButton_Stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_Show, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(52, 52, 52)
                        .addComponent(jButton_Next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Header, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel_HeaderTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_HeaderArtist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Artist, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_PlayReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Stop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_Show, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_NextActionPerformed
        // TODO add your handling code here:
        mainwindow.stopSound();
        selectRandomNext();
        jButton_Stop.setEnabled(false);
        jButton_Show.setEnabled(false);
        jButton_PlayReverse.setEnabled(true);
        gamewindowpanel.setReset();
    }//GEN-LAST:event_jButton_NextActionPerformed

    private void jButton_ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowActionPerformed
        // TODO add your handling code here:
        playTrackForward(jList_Tracks.getSelectedIndex());
        jButton_Stop.setEnabled(true);
        jButton_Show.setEnabled(false);
        jButton_PlayReverse.setEnabled(false);
        gamewindowpanel.setTitleArtist(tracks.get(jList_Tracks.getSelectedIndex()).getTitle(), 
                                       tracks.get(jList_Tracks.getSelectedIndex()).getArtist());
        mainwindow.switchToTeam();
    }//GEN-LAST:event_jButton_ShowActionPerformed

    private void jButton_PlayReverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PlayReverseActionPerformed
        // TODO add your handling code here:
        playTrackReverse(jList_Tracks.getSelectedIndex());
        jButton_Show.setEnabled(true);
        jButton_Stop.setEnabled(true);
        
        //count number of played tracks
        if(tracks.get(jList_Tracks.getSelectedIndex()).setSelected()){
            playcount++;
        }
        


    }//GEN-LAST:event_jButton_PlayReverseActionPerformed

    private void jButton_StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StopActionPerformed
        // TODO add your handling code here:
        mainwindow.stopSound();
        jButton_Stop.setEnabled(false);
    }//GEN-LAST:event_jButton_StopActionPerformed

    
    //select random
    private void selectRandomNext(){
        
        //notify "all played"
        if(playcount == tracks.size()){
            jLabel_Title.setForeground(Color.ORANGE);
            jLabel_Artist.setForeground(Color.ORANGE);
        }
        
        //select next random track
        if(playcount < tracks.size()){
            do{
                Random rand = new Random();
                int rnd = rand.nextInt(tracks.size());
                jList_Tracks.setSelectedIndex(rnd);
                jLabel_Title.setText(tracks.get(rnd).getTitle());
                jLabel_Artist.setText(tracks.get(rnd).getArtist());
            }while(tracks.get(jList_Tracks.getSelectedIndex()).isSelected());
        }
    }
    
    //play track
    private void playTrackReverse(int index){
        final String filename = tracks.get(index).getReversefile();
        final String directory = System.getProperty("user.dir");
        try{
            mainwindow.playSound(Paths.get(directory + "/ReverseMusic/" + filename).toUri().toURL());
        }
        catch (Exception e){
            
        }
    }
    
    private void playTrackForward(int index){
        String filename = tracks.get(index).getForwardfile();
        final String directory = System.getProperty("user.dir");
        try{
            mainwindow.playSound(Paths.get(directory + "/ReverseMusic/" + filename).toUri().toURL());
        }
        catch (Exception e){
            
        }
    }
    
    //read files
    private void getTracks() throws Exception{
        
        //get current directory
        final String directory = System.getProperty("user.dir");
        
        try{
            File folder = new File(directory + "/ReverseMusic/");
            File[] listOfFiles = folder.listFiles();

            //sort alphabetically to ensure correct order
            Arrays.sort(listOfFiles);
            
            for (int i = 0; i < listOfFiles.length-1; i+=2) {
                
                //parse artist/title
                String tmp = listOfFiles[i].getName();               
                String title = tmp.substring(0, tmp.indexOf('_'));
                tmp = tmp.substring(tmp.indexOf('_')+1);
                String artist = tmp.substring(0, tmp.indexOf('_'));
                
                //parse filenames
                String forwardfile = listOfFiles[i].getName();
                String reversefile = listOfFiles[i+1].getName();
                
                //append tracklist
                tracks.add(new Track(artist, title, forwardfile, reversefile));
            }
            
            if(tracks.isEmpty()){
                throw new Exception("No Tracks found!");
            }
        }
        catch (Exception e){
            throw e;
        }
    }
    
    //Class for single Track
    private class Track{
        
        private String artist;
        private String title;
        private String forwardfile;
        private String reversefile;
        private boolean selected;

        public Track(String artist, String title, String forwardfile, String reversefile) {
            this.artist = artist;
            this.title = title;
            this.forwardfile = forwardfile;
            this.reversefile = reversefile;
        }

        /**
         * @return the artist
         */
        public String getArtist() {
            return artist;
        }

        /**
         * @return the title
         */
        public String getTitle() {
            return title;
        }

        /**
         * @return the forwardfile
         */
        public String getForwardfile() {
            return forwardfile;
        }

        /**
         * @return the reversefile
         */
        public String getReversefile() {
            return reversefile;
        }

        /**
         * @return the selected
         */
        public boolean isSelected() {
            return selected;
        }

        /**
         * @param selected the selected to set
         */
        public boolean setSelected() {
            if(this.selected){
                return false;
            }
            else{
                this.selected = true;
                return true;
            }
        }
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Next;
    private javax.swing.JButton jButton_PlayReverse;
    private javax.swing.JButton jButton_Show;
    private javax.swing.JButton jButton_Stop;
    private javax.swing.JLabel jLabel_Artist;
    private javax.swing.JLabel jLabel_Header;
    private javax.swing.JLabel jLabel_HeaderArtist;
    private javax.swing.JLabel jLabel_HeaderTitle;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JList<String> jList_Tracks;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
