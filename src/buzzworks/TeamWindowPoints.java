/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzworks;

import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Simon Junga (simonthechipmunk)
 */
public class TeamWindowPoints extends javax.swing.JFrame {

    private ArrayList<TeamPanel> teampanels;
    private mainWindow mainwindow;
    
    private TimerBar timerbar;
    private int buzzed_address = -1;
    
    /**
     * Creates new form TeamWindowPoints
     */
    public TeamWindowPoints() {
        initComponents();
    }

    public TeamWindowPoints(mainWindow mainwindow, ArrayList teampanels){
        this.mainwindow = mainwindow;
        this.teampanels = teampanels;
        
        //set window title
        this.setTitle("Buzzworks - TeamChart");
        
        //init window components
        initComponents();
        jLabel_Timer.setVisible(false);
        jProgressBar_Timer.setVisible(false);
        
        //set jLabel renderer for list
        jList_Teams.setCellRenderer(new TeamWindowPoints.LabelRenderer());
        jList_Points.setCellRenderer(new TeamWindowPoints.LabelRenderer());
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList_Teams = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Points = new javax.swing.JList<>();
        jLabel_Header = new javax.swing.JLabel();
        jProgressBar_Timer = new javax.swing.JProgressBar();
        jLabel_Timer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jList_Teams.setMinimumSize(new java.awt.Dimension(350, 0));
        jList_Teams.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jList_Teams);

        jList_Points.setMinimumSize(new java.awt.Dimension(200, 0));
        jScrollPane2.setViewportView(jList_Points);

        jLabel_Header.setFont(new java.awt.Font("Cantarell", 0, 60)); // NOI18N
        jLabel_Header.setText("Teams - Points");
        jLabel_Header.setMaximumSize(new java.awt.Dimension(391, 127));
        jLabel_Header.setMinimumSize(new java.awt.Dimension(391, 127));
        jLabel_Header.setPreferredSize(new java.awt.Dimension(391, 127));

        jProgressBar_Timer.setFocusable(false);
        jProgressBar_Timer.setOpaque(false);
        jProgressBar_Timer.setRequestFocusEnabled(false);

        jLabel_Timer.setFont(new java.awt.Font("Cantarell", 1, 100)); // NOI18N
        jLabel_Timer.setForeground(new java.awt.Color(182, 48, 45));
        jLabel_Timer.setText("5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar_Timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_Timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar_Timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //start Timer
    public void startTimer(int time){
        stopTimer();
        timerbar = new TimerBar(mainwindow, time);
        new Thread(timerbar).start();
    }
    
    //stop Timer
    public void stopTimer(){
        try{
            timerbar.terminate();
        }
        catch(Exception e){
            
        }
    }

    //update the teamlist
    public void updateList(){
        
        DefaultListModel model_teams = new DefaultListModel();
        DefaultListModel model_points = new DefaultListModel();
        
        int selected_index = -1;

        for(int i=0; i<teampanels.size(); i++){
            JLabel label = new JLabel(teampanels.get(i).team.getName());
            label.setForeground(teampanels.get(i).team.getColor());
            label.setFont(new Font(label.getFont().getName(), Font.PLAIN, 90));
            model_teams.addElement(label);
            
            label = new JLabel(Integer.toString(teampanels.get(i).team.getPoints()));
            label.setForeground(teampanels.get(i).team.getColor());
            label.setFont(new Font(label.getFont().getName(), Font.PLAIN, 90));
            model_points.addElement(label);
            
            if(buzzed_address > 0 && teampanels.get(i).team.getAddress() == buzzed_address){               
                selected_index = i;              
            }
        }
        
        jList_Teams.setModel(model_teams);
        jList_Points.setModel(model_points);
        
        if(selected_index >= 0){               
            jList_Teams.setSelectedIndex(selected_index);
            jList_Points.setSelectedIndex(selected_index);               
        }
        
        
    }
    
    //select team on list
    public void selectTeam(int address){
        for(int i = 0; i<teampanels.size(); i++){
            if(teampanels.get(i).team.getAddress() == address){
                jList_Teams.setSelectedIndex(i);
                jList_Points.setSelectedIndex(i);
                buzzed_address = address;
                break;
            }
        }
        
    }
    
    //unselect list
    public void unselectTeam(){
        jList_Teams.clearSelection();
        jList_Points.clearSelection();
        buzzed_address = -1;
    }
    
    //listrenderer used to display jLabel components in the list
    private class LabelRenderer implements ListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel renderer = (JLabel) value;
            
            //select
            if(isSelected){
                renderer.setBackground(renderer.getForeground().darker().darker());
                renderer.setOpaque(true);
            }
            else{
                renderer.setOpaque(false);
            }
            return renderer;
        }
    }
    
    
    //thread for displaying Timer progressbar
    private class TimerBar implements Runnable {
        
        private volatile boolean running = true;
        
        private mainWindow mainwindow;
        private final int updateinterval = 10;
        private int time = 0;
        private int seconds;
        
        public TimerBar(mainWindow mainwindow, int seconds) {
            this.mainwindow = mainwindow;
            this.seconds = seconds;
            
            //init
            jLabel_Timer.setVisible(true);
            jLabel_Timer.setText(Integer.toString(this.seconds));
            
            jProgressBar_Timer.setVisible(true);
            jProgressBar_Timer.setMinimum(0);
            jProgressBar_Timer.setMaximum(this.seconds*1000);
            jProgressBar_Timer.setValue(this.seconds*1000);
            
        }
        
        public void terminate() 
        {
            running = false;
            try{
                Thread.sleep(10);
            }
            catch(Exception e){
                
            }
        }
        
        @Override
        public void run() {
            //background
            
            try{
                
                //run for x seconds. give some additional 500ms to display "0" at the end
                while(time <= seconds*1000+500 && running){
                    
                    Thread.sleep(updateinterval);
                    
                    //update seconds counter
                    if(time%1000 == 0){
                        jLabel_Timer.setText(Integer.toString(seconds - time/1000));
                        
                        //play sound when time is up
                        if(seconds - time/1000 == 0){
                            mainwindow.playSound(mainWindow.class.getClassLoader().getResource("resources/sounds/positive_beeps1.wav"));
                        }
                    }
                    
                    //update progressbar
                    if(time <= seconds*1000){
                        jProgressBar_Timer.setValue(seconds*1000 - time);
                    }
                    
                    time += updateinterval;
                }
                
            }
            catch (Exception e){
                
            }
            
            //exit
            jLabel_Timer.setVisible(false);
            jProgressBar_Timer.setVisible(false);


        }
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_Header;
    private javax.swing.JLabel jLabel_Timer;
    private javax.swing.JList<String> jList_Points;
    private javax.swing.JList<String> jList_Teams;
    private javax.swing.JProgressBar jProgressBar_Timer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
