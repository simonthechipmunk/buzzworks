/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzworks;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;

/**
 *
 * @author Simon Junga (simonthechipmunk)
 */
public class DialogSerialSelect extends javax.swing.JFrame {

    Serial serial;
    ArrayList<Integer> teamlist;
    ArrayList<Boolean> checkboxes;

    /**
     * Creates new form DialogSerialSelect
     */
    public DialogSerialSelect(Serial serial, ArrayList<Integer> teamlist, ArrayList checkboxes) {
        this.serial = serial;
        this.teamlist = teamlist;
        this.checkboxes = checkboxes;

        initComponents();
        jCheckBox_GameTab.setSelected(true);
        jCheckBox_Timer.setEnabled(false);
        pack();

        //init infobar
        jLabel_Progress.setVisible(false);
        jProgressBar_Create.setVisible(false);

        jProgressBar_Create.setMinimum(0);
        jProgressBar_Create.setMaximum(100);
        jProgressBar_Create.setValue(0);

        //clear list
        jComboBox_Ports.removeAllItems();
        
        //set focus
        this.getRootPane().setDefaultButton(jButton_OK);
        jButton_OK.requestFocus();

        //fill list
        Vector<String> Ports = new Vector();
        try {
            Ports = this.serial.listPorts();

            for (int i = 0; i < Ports.size(); i++) {
                jComboBox_Ports.addItem(Ports.get(i));
            }
        } catch (Exception e) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar_Create = new javax.swing.JProgressBar();
        jLabel_Progress = new javax.swing.JLabel();
        jComboBox_Ports = new javax.swing.JComboBox<>();
        jButton_OK = new javax.swing.JButton();
        jLabel_Title = new javax.swing.JLabel();
        jCheckBox_PointsWindow = new javax.swing.JCheckBox();
        jCheckBox_DebugMode = new javax.swing.JCheckBox();
        jCheckBox_GameTab = new javax.swing.JCheckBox();
        jCheckBox_Timer = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_Progress.setText("Creating Teams...");

        jComboBox_Ports.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton_OK.setText("OK");
        jButton_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OKActionPerformed(evt);
            }
        });

        jLabel_Title.setFont(new java.awt.Font("Cantarell", 0, 48)); // NOI18N
        jLabel_Title.setText("Select Serial Port");

        jCheckBox_PointsWindow.setText("Additional PointList Window");
        jCheckBox_PointsWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_PointsWindowActionPerformed(evt);
            }
        });

        jCheckBox_DebugMode.setText("Test Mode");
        jCheckBox_DebugMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_DebugModeActionPerformed(evt);
            }
        });

        jCheckBox_GameTab.setText("Initialize GameTab");
        jCheckBox_GameTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_GameTabActionPerformed(evt);
            }
        });

        jCheckBox_Timer.setText("Enable Timer");
        jCheckBox_Timer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_TimerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel_Progress, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBar_Create, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jComboBox_Ports, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox_PointsWindow)
                            .addComponent(jCheckBox_DebugMode)
                            .addComponent(jCheckBox_GameTab)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jCheckBox_Timer)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Ports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_OK))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox_PointsWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_Timer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_GameTab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_DebugMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar_Create, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Progress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed
        // TODO add your handling code here:        
        new Thread(new serialparser()).start();
    }//GEN-LAST:event_jButton_OKActionPerformed

    private void jCheckBox_PointsWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_PointsWindowActionPerformed
        // TODO add your handling code here:
        jCheckBox_Timer.setEnabled(jCheckBox_PointsWindow.isSelected());
    }//GEN-LAST:event_jCheckBox_PointsWindowActionPerformed

    private void jCheckBox_DebugModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_DebugModeActionPerformed
        // TODO add your handling code here:
        
        //disable list/button
        jComboBox_Ports.setEnabled(!jCheckBox_DebugMode.isSelected());
    }//GEN-LAST:event_jCheckBox_DebugModeActionPerformed

    private void jCheckBox_GameTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_GameTabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_GameTabActionPerformed

    private void jCheckBox_TimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_TimerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_TimerActionPerformed

    private class serialparser implements Runnable {

        @Override
        public void run() {
            //background
            
            DialogBuzzerEmulation dialogbuzzeremulation = null;
            try {
                
                //disable list/button
                jButton_OK.setEnabled(false);
                jComboBox_Ports.setEnabled(false);
                jCheckBox_PointsWindow.setEnabled(false);
                jCheckBox_DebugMode.setEnabled(false);
                jCheckBox_GameTab.setEnabled(false);
                jCheckBox_Timer.setEnabled(false);
                
                if(jCheckBox_DebugMode.isSelected()){
                    dialogbuzzeremulation = new DialogBuzzerEmulation(serial);
                }
                else{
                    serial.connect(jComboBox_Ports.getSelectedItem().toString());
                }

                //scan for buzzers
                serial.Send("all:get.online\n");
                
                //set text
                jLabel_Progress.setText("Waiting for Serial");
                jLabel_Progress.setVisible(true);
                while (serial.in.available() < 0) {
                }
                Thread.sleep(500);

                Scanner scanner = new Scanner(serial.in);
                try {
                    jLabel_Progress.setText("Scanning Teams");
                    jProgressBar_Create.setVisible(true);

                    while (true) {
                        //scan                    
                        String inStr = scanner.nextLine();
                        
                        if (inStr.indexOf(':') != -1) {
                            
                            //add teams
                            if (inStr.substring(inStr.indexOf(':') + 1).equals("is.online")) {
                                teamlist.add(new Integer(inStr.substring(0, inStr.indexOf(':'))));
                                jProgressBar_Create.setValue(jProgressBar_Create.getValue() + 10);
                            }
                            
                            //end of input
                            if (inStr.substring(inStr.indexOf(':') + 1).equals("devices.online")) {
                                jProgressBar_Create.setValue(100);
                                break;
                            }
                            
                        }

                        Thread.sleep(200);
                    }
                    
                } catch (Exception e) {

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            //set buzzer emulation visible
            if(dialogbuzzeremulation != null){
                dialogbuzzeremulation.setVisible(true);
            }
            
            //return checkbox state
            checkboxes.add(jCheckBox_PointsWindow.isSelected());
            checkboxes.add(jCheckBox_Timer.isSelected());
            checkboxes.add(jCheckBox_GameTab.isSelected());
            
            //close window and switch to mainview
            dispose();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_OK;
    private javax.swing.JCheckBox jCheckBox_DebugMode;
    private javax.swing.JCheckBox jCheckBox_GameTab;
    private javax.swing.JCheckBox jCheckBox_PointsWindow;
    private javax.swing.JCheckBox jCheckBox_Timer;
    private javax.swing.JComboBox<String> jComboBox_Ports;
    private javax.swing.JLabel jLabel_Progress;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JProgressBar jProgressBar_Create;
    // End of variables declaration//GEN-END:variables
}
